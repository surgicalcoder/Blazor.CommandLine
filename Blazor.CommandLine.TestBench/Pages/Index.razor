@page "/"
@using Blazor.CommandLine
@using Blazor.CommandLine
@using Blazor.CommandLine.Command
@using Blazor.CommandLine.Console

<h1>Hello, world!</h1>

<BlazorCommandLine @ref="console" Name="Some Demo App v1.0.0"/>

@code
{
	BlazorCommandLine console;

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		console.Commands.Add(new CommandExample("simple","Description of command"));
		console.Commands.Add(new LongCommand("lng","Description of long-running command"));
		console.Commands.Add(new HelloWorldExample("hello", "Says hello world"));
		console.Commands.Add(new HelloWorldExample2("hello2", "Says hello world using Arguments not option"));

		return base.OnAfterRenderAsync(firstRender);
	}

	public class HelloWorldExample2 : BaseCommand
	{
		public HelloWorldExample2(string name, string description, bool longRunning = false) : base(name, description, false)
		{
			base.UseArguments("Provide name to say hi to");
		}

		public override bool Execute(DefaultStreamWriter console, string option1, string option2, string option3, string option4, List<string> arguments)
		{
			console.WriteLine($"Arguments : {string.Join(",", arguments)}");
			console.WriteLine("");
			if (!arguments.Any())
			{
				console.Write("ERROR: Name not provided");
				return false;
			}
			console.Write($"Hello, {string.Join(" ", arguments)}!" );
			return true;
		}
	}
	
	public class HelloWorldExample : BaseCommand
	{
		public HelloWorldExample(string name, string description, bool longRunning = false) : base(name, description, longRunning)
		{
			base.AddOption("-n", "Name to say hello to");
			base.AddOption("-n2", "Name to say hello to");
			base.AddOption("-n3", "Name to say hello to");
			base.AddOption("-n4", "Name to say hello to");
			base.AddOption("-n5", "Name to say hello to");
		}

		public override bool Execute(DefaultStreamWriter console, string option1, string option2, string option3, string option4, List<string> arguments)
		{
			console.WriteLine($"Option 1 : {option1}");
			console.WriteLine($"Option 2 : {option2}");
			console.WriteLine($"Option 3 : {option3}");
			console.WriteLine($"Option 4 : {option4}");
			console.WriteLine($"Arguments : {string.Join(",", arguments)}");
			console.WriteLine("");
			if (string.IsNullOrWhiteSpace(option1))
			{
				console.Write("ERROR: Name not provided");
				return false;
			}
			
			console.Write($"Hello, {option1}!" );
			return true;
		}
	}

	public class CommandExample : BaseCommand
	{
		public CommandExample(string name,string description):base(name,description)
		{
			base.AddOption("-t","Description of option -t");
			base.AddOption("-ar","Description of option -ar");
		}

		public override bool Execute(DefaultStreamWriter console,string option1,string option2,string option3,string option4,List<string> arguments)
		{
			console.Write("This is output of a simple command");
			return true;
		}
	}

	public class LongCommand : BaseCommand
	{
		public LongCommand(string name, string description):base(name,description,true)
		{
            
		}

		public override async Task<bool> ExecuteAsync(DefaultStreamWriter console, string option1,string option2,string option3,string optionArgument4,List<string> arguments)
		{
			var i = 0;

			while (i < 10)
			{
				await Task.Delay(550);
				i++;
			}
            
			console.Write("This was a long running command");
			return true;
		}
	}
}